import axios from "axios";
import fs from "fs";
import FormData from "form-data"; // Import FormData for

// image name field required
const uploadSingle = async (filePath) => {
  try {
    // Read the file
    const imageBuffer = fs.readFileSync(filePath);

    // Prepare the FormData for multipart/form-data
    const formData = new FormData();
    formData.append("key", process.env.IMGBB_API_KEY);
    formData.append("image", imageBuffer.toString("base64"));

    // Make the API request to ImgBB
    const response = await axios.post(
      "https://api.imgbb.com/1/upload",
      formData,
      {
        headers: {
          ...formData.getHeaders(), // Include headers generated by FormData
        },
      }
    );

    // Clean up the temporary file
    try {
      fs.unlinkSync(filePath);
    } catch (error) {
      console.log(error);
    }

    // Return the uploaded image URL to the client
    return {
      imageUrl: response.data.data.url,
      delteUrl: response.data.data.delete_url,
    };
  } catch (error) {
    console.error(
      "Error uploading to ImgBB:",
      error.response?.data || error.message
    );
    res.status(500).json({ error: "Image upload failed" });
  }
};

const uploadMultiple = async (files) => {
  // images  name field required
  try {
    const uploadedImages = [];

    for (const file of files) {
      // Read the file and encode it as Base64
      const imageBuffer = fs.readFileSync(file.path);

      const formData = new FormData();
      formData.append("key", process.env.IMGBB_API_KEY);
      formData.append("image", imageBuffer.toString("base64"));

      // Upload the file to ImgBB
      const response = await axios.post(
        "https://api.imgbb.com/1/upload",
        formData,
        {
          headers: {
            ...formData.getHeaders(),
          },
        }
      );

      // Store the URL of the uploaded image
      uploadedImages.push({
        url: response.data.data.url,
        deleteUrl: response.data.data.delete_url,
      });

      // Clean up the temporary file
      fs.unlinkSync(file.path);
    }
    console.log(uploadedImages);
    return uploadedImages;
  } catch (error) {
    console.error(
      "Error uploading images to ImgBB:",
      error.response?.data || error.message
    );
  }
};

export { uploadMultiple, uploadSingle };
